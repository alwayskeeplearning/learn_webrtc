---
alwaysApply: true
---

# WebRTC 视频通话教程规则

## 总体目标

从零开始，逐步实现一个**基础的网页视频通话功能**，以学习 WebRTC 的核心概念和完整工作流程。我们将使用 TypeScript/JavaScript，确保代码简洁、易懂、可直接运行。最终目标是构建一个包含前端UI和信令服务的完整示例。

## 目标任务拆分

每个部分将进一步拆分成小步骤（例如步骤1.1、1.2），每一步聚焦于一个核心知识点。

- **部分1: WebRTC 核心理论与准备工作**

  - 步骤1.1: 讲解 WebRTC 的核心价值、主要应用场景，以及它与 WebSocket 的本质区别。
  - 步骤1.2: 深入讲解 WebRTC 的三大核心API (`getUserMedia`, `RTCPeerConnection`, `RTCDataChannel`) 和信令（Signaling）的核心作用。
  - 步骤1.3: 初始化项目结构（HTML/CSS/TS 文件）。
  - 步骤1.4: 实现 `getUserMedia` API 调用，获取本地摄像头和麦克风权限。
  - 步骤1.5: 将捕获到的本地视频流（`MediaStream`）在页面 `<video>` 标签中播放。

- **部分2: 实现信令服务器**

  - 步骤2.1: 讲解信令的用途和原理，以及为何选择 WebSocket 作为信令技术。
  - 步骤2.2: 搭建一个基础的 Node.js + WebSocket 信令服务器。
  - 步骤2.3: 实现客户端与信令服务器的连接和基础消息交换。

- **部分3: 建立对等连接 (Peer-to-Peer)**

  - 步骤3.1: **理论**: 深入讲解 `RTCPeerConnection` 的工作流程、**NAT 穿透问题**，以及 **STUN / TURN 服务器** 在 **ICE** 协议中的关键作用。
  - 步骤3.2: **理论**: 详细介绍 **SDP**（会话描述协议）的结构，以及它在媒体协商中的用途。
  - 步骤3.3: **实现**: 在客户端创建 `RTCPeerConnection` 实例，并配置公共 STUN 服务器以进行 ICE 协商。
  - 步骤3.4: **实现 (SDP 交换)**: 实现完整的 Offer/Answer（提议/应答）交换流程，双方通过信令服务器交换 SDP 信息。
  - 步骤3.5: **实现 (ICE 交换)**: 实现 ICE Candidate 的交换流程，双方通过信令服务器交换网络候选地址，完成最终的连接建立。
  - 步骤3.6: **连接成功**: 成功获取远程视频流，并将其显示在页面的 `<video>` 元素中。

- **部分4: 构建基础的用户界面 (UI)**

  - 步骤4.1: 创建必要的 HTML 元素，如本地视频窗口、远程视频窗口、呼叫/挂断按钮。
  - 步骤4.2: 将 WebRTC 的核心逻辑与 UI 事件进行绑定。
  - 步骤4.3: 实现挂断通话、关闭连接的功能。

- **部分5: 总结与展望**

  - 步骤5.1: 修复潜在问题并优化代码。
  - 步骤5.2: 全面回顾整个 WebRTC 通信流程。
  - 步骤5.3: 教程总结和后续学习方向（如数据通道、多人通话等）。

- **部分6: 扩展与进阶：从P2P到多人通话**
  - 步骤6.1: **理论**: 讲解 P2P (Peer-to-Peer) 架构的优缺点，以及在多人通话场景下的局限性。
  - 步骤6.2: **理论**: 介绍服务器中继架构，重点讲解 **MCU (Multipoint Control Unit)** 和 **SFU (Selective Forwarding Unit)** 的工作原理、区别及适用场景。
  - 步骤6.3: **展望**: 探讨如何基于当前项目，进一步选择并集成开源 SFU/MCU 服务来实现一个基础的多人通话应用。

## 与用户的交互要求

- 全程用**中文**沟通。
- 每个步骤开始时，先解释**理论知识**，在你确认理解后（回复格式：`理解了步骤X理论`），再推进到代码实现。在开始代码实现之前同样的要对用到的相关核心api进行一个理论讲解，在你确认理解后（回复格式：`理解了步骤X的API`），再推进到真实的代码编写实现。
- 代码实现将拆分成小步骤，每步只给出少量、聚焦的代码。代码中的注释采用中文。代码用Markdown codeblock格式，提供文件路径和行号（例如`1:10:src/file.ts`）。
- 每个步骤结束后，我会询问你是否理解，并等待你确认（回复格式：`理解了步骤X.Y`）后再继续。
- 如果你有任何疑问，我会**优先解答**，然后再推进教学。
- 在修改已有文件前，我会先读取文件最新内容，确保修改是基于最新版本。
- 在每个有实际产出的步骤完成后，我会提供**验证和测试**的方法（例如：如何打开浏览器查看效果），以帮助你更好地理解。

## 当前进展

- **当前部分**: 部分2: 实现信令服务器
- **当前步骤**: 步骤2.1: 讲解信令的用途和原理，以及为何选择 WebSocket 作为信令技术。
- **状态**: 已完成第一部分的所有内容，准备开始第二部分：信令服务器的搭建。
